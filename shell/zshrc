# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ENVRIONMENT
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# PATH
export PATH=$HOME/bin:$HOME/.bin:$HOME/.local/bin:$HOME/.yarn/bin:$GOPATH/bin:$PATH
export PATH=$HOME/Library/Python/3.10/bin:$(go env GOPATH)/bin:$PATH
export PATH="$HOME/.tgenv/bin:$HOME/.fig/bin:$PATH"
export PATH="$HOME/.cargo/bin:$HOME/.local/share/bob/nvim-bin:$PATH"
export PATH="$BUN_INSTALL/bin:$PATH"
export PATH=$HOME/.nvm/versions/node/$(node --version)/lib:$PATH

# Languages
export GOPATH=$HOME/code/go
export BUN_INSTALL="$HOME/.bun"
export NODE_PATH=$NODE_PATH:`npm root -g`

# Misc
export EDITOR=nvim
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export RIPGREP_CONFIG_PATH=$HOME/.rg.conf

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ZINIT
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
local ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[[ -d "$ZINIT_HOME/.git" ]] || git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "$ZINIT_HOME/zinit.zsh"

zinit light zdharma-continuum/fast-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit ice depth=1; zinit light romkatv/powerlevel10k 

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ZSH Config 
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# autoload
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
autoload -U +X bashcompinit && bashcompinit
autoload -Uz compinit
compinit -C

# ???
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search


# bindkey
bindkey "^[[A" up-line-or-beginning-search 
bindkey "^[[B" down-line-or-beginning-search
bindkey "^[[1;2C" forward-word
bindkey "^[[1;2D" backward-word
bindkey -s '^G' 'cdf\n'
bindkey -s '^L' 'cdl\n'

# prompt
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# SOURCED CONFIG
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# me
[[ -f "$HOME/.telemetry.sh" ]] && source "$HOME/.telemetry.sh"
[[ -f "$HOME/.secrets" ]] && source "$HOME/.secrets"


# gcloud
if [ -f "${HOME}/.local/gcloud/path.zsh.inc" ]; then . "${HOME}/.local/gcloud/path.zsh.inc"; fi
if [ -f "${HOME}/.local/gcloud/completion.zsh.inc" ]; then . "${HOME}/.local/gcloud/completion.zsh.inc"; fi

# bun
[ -s "/home/hjf/.bun/_bun" ] && source "/home/hjf/.bun/_bun"

# mise
if [[ -x "$HOME/.local/bin/mise" ]]; then
  eval "$("$HOME/.local/bin/mise" activate zsh)"
else
  echo " mise not found. Installing to ~/.local/bin..."
  curl https://mise.run | sh
fi

eval "$($HOME/.local/bin/mise activate zsh)"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Aliases
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
alias gs='git status'
alias gcl="git stash save && git stash clear"
alias tf=terraform
alias tg=terragrunt
alias vim=nvim
alias ls="ls --color=auto"
alias la="ls -la"
alias ll="ls -l"
alias l="ls -l"
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias pbcopy="xclip -selection clipboard"
alias pbpaste="xclip -selection clipboard -o"
alias kctl=kubectl
alias dl="cd /mnt/c/Documents\ and\ Settings/harry.fitzgerald/Downloads/"

gitswitch() {
    local config_dir="$HOME/.ssh"
    local self_config="$config_dir/config-self"
    local work_config="$config_dir/config-gfs"
    local target_config="$config_dir/config"

    case "$1" in
        self)
            cp "$self_config" "$target_config"
            echo "Switched to personal SSH config."
            ;;
        work)
            cp "$work_config" "$target_config"
            echo "Switched to work SSH config."
            ;;
        *)
            echo "Usage: gitswitch {self|work}"
            return 1
            ;;
    esac
}

function take() {
    mkdir -p $1
    cd $1
}

function cdf() {
  local dir
  dir=$(fdfind . ~/code --type d --exclude .git --exclude node_modules --exclude go | fzf --preview 'tree -L 1 {}') && cd "$dir"
}


function cdl() {
  local dir
  dir=$(fdfind . "$PWD" --type d --hidden --exclude .git --exclude node_modules --exclude go | fzf --preview 'tree -L 1 {}') && cd "$dir"
}

